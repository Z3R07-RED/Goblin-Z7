#!/bin/bash
#Coded by Z3R07-RED

#VARIABLES
if [[ -s "GZ7/.CS07/security/.key" ]]; then

	PASSWRD=$(base64 -d GZ7/.CS07/security/.key)
else
	PASSWRD=""
fi

if [[ -s "GZ7/.CS07/security/.question" ]]; then
	QUESTION=$(base64 -d GZ7/.CS07/security/.question)
else
	QUESTION="Second password?"
fi

if [[ -s "GZ7/.CS07/security/.reply" ]]; then
	ANSWER=$(base64 -d GZ7/.CS07/security/.reply)
else
	ANSWER=""
fi

function SENDING_DATA(){
#USERNAME
sed -i "s/USERNAME=\"$USERNAME\"/USERNAME=\"$USERNAME01\"/g" "$config_directory/goblin.conf" 2>/dev/null
USERNAME="$USERNAME01"

#PASSWORD
if [[ -f GZ7/.CS07/security/.key ]]; then
	rm -rf GZ7/.CS07/security/.key
fi
printf "$passwd" > GZ7/.CS07/security/.Passwd1
base64 GZ7/.CS07/security/.Passwd1 > GZ7/.CS07/security/.key
rm GZ7/.CS07/security/.Passwd1
chmod -w GZ7/.CS07/security/.key
chmod +x GZ7/.CS07/security/.key
#SECURITY QUESTION
if [[ -f GZ7/.CS07/security/.question ]]; then
	rm GZ7/.CS07/security/.question
fi
printf "$pregunta" > GZ7/.CS07/security/.Pregunt1
base64 GZ7/.CS07/security/.Pregunt1 > GZ7/.CS07/security/.question
rm GZ7/.CS07/security/.Pregunt1
chmod +x GZ7/.CS07/security/.question
#ANSWER
if [[ -f GZ7/.CS07/security/.reply ]]; then
	rm GZ7/.CS07/security/.reply
fi
printf "$respuesta" > GZ7/.CS07/security/.Respues1
base64 GZ7/.CS07/security/.Respues1 > GZ7/.CS07/security/.reply
rm GZ7/.CS07/security/.Respues1
chmod +x GZ7/.CS07/security/.reply
SHOW_REGISTER="True"
}


function REGISTRATION_ERROR(){
$DIALOG --backtitle "$program_name" \
	--title "[ERROR]" \
    --colors --clear \
	--msgbox "-Please complete all the information." 8 51
SHOW_REGISTER="False"
}

function NEW_ADMINISTRATOR(){
let PROFILEN=$(grep . tmp/User_Profile.txt | wc -l)

if [[ $PROFILEN == 4 ]]; then
user=$(awk 'NR==1' tmp/User_Profile.txt)
USERNAME01="$user"
	if [[ -z $user ]]; then
		REGISTRATION_ERROR
	fi
passwd=$(awk 'NR==2' tmp/User_Profile.txt)
PASSWRD=$passwd
	if [[ -z $passwd ]]; then
		REGISTRATION_ERROR
	fi
pregunta=$(awk 'NR==3' tmp/User_Profile.txt)
QUESTION="$pregunta"
	if [[ -z "$pregunta" ]]; then
		REGISTRATION_ERROR
	fi
respuesta=$(awk 'NR==4' tmp/User_Profile.txt)
ANSWER="$respuesta"
	if [[ -z "$respuesta" ]]; then
		REGISTRATION_ERROR
	fi

    if [[ $SHOW_REGISTER == "True" ]]; then
        SENDING_DATA
        rm tmp/User_Profile.txt
        $DIALOG --clear --backtitle "$program_name" \
                --title "REGISTRY" \
                --msgbox "-The user data has been updated." 8 51
    fi

else
	REGISTRATION_ERROR
fi

}

function REGISTRY(){
while :
do
exec 3>&1
FORM=$($DIALOG --ok-label "Submit" \
	--backtitle "$program_name" \
	--title "PROFILE" \
    --insecure --colors --clear \
	--mixedform "To continue press the \Z4\Zb\Zu'TAB'\Zn key and then \Z4\Zb\Zu'ENTER'\Zn\n\
\Z0\ZrUser profile:\Zn" 13 55 4 \
	"USERNAME:" 1 1 "$USERNAME"     1 11 35 0 0 \
	"PASSWORD:" 2 1 "$PASSWRD"      2 11 35 0 1 \
	"QUESTION:" 3 1 "$QUESTION"     3 11 35 45 0 \
	"ANSWER  :" 4 1 "$ANSWER"       4 11 35 0 1 \
2>&1 1>&3)
E_status=$?
exec 3>&-

case $E_status in
	0)
		if [[ -d tmp ]]; then
			printf "$FORM\n" > tmp/User_Profile.txt
            SHOW_REGISTER="True"
			NEW_ADMINISTRATOR
            if [[ $SHOW_REGISTER == "True" ]]; then
                break
            fi
		else
            unexpected_error
		fi
		;;
	1)
        break
        ;;
	255)
		echo $(clear)
		echo "Program aborted." >&2
		exit 1
		;;
esac
done

if [[ -z "$USERNAME" ]]; then
    unexpected_error
elif [[ -z "$PASSWRD" ]]; then
    unexpected_error
elif [[ -z "$QUESTION" ]]; then
    unexpected_error
elif [[ -z "$ANSWER" ]]; then
    unexpected_error
fi

}

if [[ -z "$PASSWRD" ]]; then
    REGISTRY
elif [[ -z "$ANSWER" ]]; then
    REGISTRY
elif [[ -z "$SHOW_REGISTER" ]]; then
    REGISTRY
fi

